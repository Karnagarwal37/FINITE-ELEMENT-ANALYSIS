//By :  KARN AGARWAL
       2 ND YEAR
Finite element analysis
Building a more detailed finite element analysis (FEA) project for structural analysis requires structuring the code into components and adding functionalities to handle larger systems. We’ll outline an FEA project for a 1D truss structure with multiple elements and nodes, following these steps:
1.	Project Structure and Basic Outline:
o	Define element properties, geometry, and material.
o	Build the local stiffness matrix for each element.
o	Assemble the global stiffness matrix.
o	Apply loads and boundary conditions.
o	Solve the system to get nodal displacements.
o	Calculate reaction forces and element stresses.
2.	Code Components:
o	Classes and Functions for managing elements, nodes, and the global system.
o	Modular functions for stiffness matrix assembly, load application, and boundary conditions.
o	Input/Output: Define input for structural layout (nodes, elements, boundary conditions) and output displacements, stresses, and reactions.
Project Code
Here's a more structured and scalable version of the FEA project in Python.
1. Define Constants and Classes for Elements and Nodes
python
Copy code
import numpy as np

# Define Material and Geometric Properties for a Truss Element
class TrussElement:
    def __init__(self, node_start, node_end, area, youngs_modulus, length):
        self.node_start = node_start  # Start node
        self.node_end = node_end      # End node
        self.area = area              # Cross-sectional area
        self.youngs_modulus = youngs_modulus  # Young's modulus
        self.length = length          # Element length

    def stiffness_matrix(self):
        # Local stiffness matrix for 1D truss element
        k = (self.youngs_modulus * self.area / self.length) * np.array([[1, -1], [-1, 1]])
        return k
2. Define the Structural System
This part manages nodes, elements, and the global stiffness matrix assembly.
python
Copy code
class TrussStructure:
    def __init__(self, num_nodes):
        self.num_nodes = num_nodes
        self.elements = []
        self.forces = np.zeros(num_nodes)     # Global force vector
        self.displacements = np.zeros(num_nodes)  # Displacements at each node
        self.stiffness_matrix = np.zeros((num_nodes, num_nodes))  # Global stiffness matrix
    
    def add_element(self, element):
        self.elements.append(element)
        # Add the element's stiffness to the global stiffness matrix
        n1, n2 = element.node_start, element.node_end
        k = element.stiffness_matrix()
        self.stiffness_matrix[n1, n1] += k[0, 0]
        self.stiffness_matrix[n1, n2] += k[0, 1]
        self.stiffness_matrix[n2, n1] += k[1, 0]
        self.stiffness_matrix[n2, n2] += k[1, 1]
    
    def apply_force(self, node, force):
        self.forces[node] = force
    
    def apply_boundary_condition(self, fixed_nodes):
        # Modify stiffness matrix and force vector for fixed boundary conditions
        for node in fixed_nodes:
            self.stiffness_matrix[node, :] = 0
            self.stiffness_matrix[:, node] = 0
            self.stiffness_matrix[node, node] = 1  # Set diagonal to 1 for stability
            self.forces[node] = 0
    
    def solve(self):
        # Solve the system of equations for displacements
        self.displacements = np.linalg.solve(self.stiffness_matrix, self.forces)
    
    def calculate_element_stress(self, element):
        # Calculate stress in an element after solving for displacements
        u1 = self.displacements[element.node_start]
        u2 = self.displacements[element.node_end]
        strain = (u2 - u1) / element.length
        stress = element.youngs_modulus * strain
        return stress
3. Define the Main Analysis Process
This is the main function where elements are created, forces and boundary conditions are applied, and results are calculated.
python
Copy code
# Main function to set up and solve a truss problem
def main():
    # Parameters
    E = 210e9       # Young's modulus in Pascals
    A = 0.01        # Cross-sectional area in m²
    L = 1.0         # Length of each element in meters

    # Create a structure with 3 nodes (for a 2-element truss system)
    structure = TrussStructure(num_nodes=3)

    # Define elements (each element connects two nodes)
    element1 = TrussElement(node_start=0, node_end=1, area=A, youngs_modulus=E, length=L)
    element2 = TrussElement(node_start=1, node_end=2, area=A, youngs_modulus=E, length=L)

    # Add elements to the structure
    structure.add_element(element1)
    structure.add_element(element2)

    # Apply forces (e.g., 1000 N at node 2)
    structure.apply_force(node=2, force=1000)

    # Apply boundary conditions (e.g., node 0 is fixed)
    structure.apply_boundary_condition(fixed_nodes=[0])

    # Solve for displacements
    structure.solve()

    # Output results
    print("Nodal Displacements:", structure.displacements)

    # Calculate and output stresses in each element
    for i, element in enumerate(structure.elements):
        stress = structure.calculate_element_stress(element)
        print(f"Stress in Element {i+1}: {stress} Pa")
4. Run the Analysis
Simply call the main() function to execute the analysis for the truss structure.
python
Copy code
if __name__ == "__main__":
    main()
Explanation of Each Component
1.	TrussElement Class: Manages properties and stiffness matrix of each truss element. The stiffness matrix is calculated based on the material and geometric properties.
2.	TrussStructure Class:
o	Maintains the list of elements and nodes.
o	Builds and stores the global stiffness matrix.
o	Has methods for adding elements, applying forces, applying boundary conditions, and solving the displacement equations.
o	Calculates element stresses based on solved displacements.
3.	Main Function (main): Sets up the structure, adds elements, applies forces and boundary conditions, and solves for nodal displacements. It also calculates and prints the stresses in each element.
Expected Output
When you run this code, the output should include:
•	Nodal Displacements: Displacements of each node.
•	Stresses in Each Element: The stress in each truss element based on the calculated displacements.
Expanding the Project
You can further expand this project by:
•	Adding support for multiple dimensions (2D or 3D truss systems).
•	Handling beam elements with bending and shear forces.
•	Including dynamic analysis for time-dependent loading.
•	Adding visualization for node positions, deformed shapes, and stress distribution.
This setup provides a solid foundation for understanding and building more complex FEA models.
4o

